{
  "openapi": "3.0.1",
  "info": {
    "version": "1.0.0",
    "title": "Surf Forecast",
    "description": "Surf Forecast API",
    "termsOfService": "https://github.com/leomoraiscam/weather-surf-backend",
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000/",
      "description": "Local server"
    }
  ],
  "tags": [
    {
      "name": "Users",
      "description": "users endpoints"
    },
    {
      "name": "Beaches",
      "description": "beaches endpoints"
    },
    {
      "name": "Forecast",
      "description": "forecast endpoints"
    }
  ],
  "paths": {
    "/users": {
      "summary": "Create User",
      "post": {
        "summary": "Creates an user",
        "description": "Creates an user in the application",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "This will be returned when the user has been created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserCreatedResponse"
                }
              }
            }
          },
          "400": {
            "description": "This will be returned when has invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Invalid parameters",
                  "code": "400",
                  "error": "Bad Request"
                }
              }
            }
          },
          "409": {
            "description": "This will be returned when The email used is already registered",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "message": "User already exists",
                  "code": "409",
                  "error": "Conflict"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "message": "Internal server error",
                  "code": "500",
                  "name": "Internal Server Error"
                }
              }
            }
          }
        },
        "tags": ["Users"]
      }
    },
    "/users/authenticate": {
      "post": {
        "summary": "Authentication user",
        "description": "Authenticate the user on the API generating a JWT token",
        "operationId": "authenticateUser",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserAuth"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "This will be returned when the user has been authenticate and the JWT returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedUserResponse"
                }
              }
            }
          },
          "400": {
            "description": "This will be returned when has invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Invalid parameters",
                  "code": "400",
                  "error": "Bad Request"
                }
              }
            }
          },
          "401": {
            "description": "This will be returned when the password used is invalid or user was found for the email used",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "User unauthorized",
                  "code": "401",
                  "error": "Unauthorized"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "message": "Internal server error",
                  "code": "500",
                  "name": "Internal Server Error"
                }
              }
            }
          }
        },
        "tags": ["Users"]
      }
    },
    "/users/me": {
      "get": {
        "summary": "Get an user",
        "description": "This will be returned when get the profile of the token's owner",
        "parameters": [
          {
            "name": "x-access-token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1ZTdmZTQ0YzQzYWQwYjAwMThmOGQ5ZmQiLCJuYW1lIjoiV2FsZGVtYXIgTmV0byIsImVtYWlsIjoid2FsZGVtYXJudEBnbWFpbC5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCRsUlZjWkc5d0dIVWJXcHF2TnJNR0F1SnNoWWJTR1RLSElQL3NycDlmTlkzZENFZDBJQjN6TyIsImlhdCI6MTU4NTQ0MDUxNywiZXhwIjoxNTg1NDYwNTE3fQ.JNtzLgCKGTAU9_-QjYUNxtM7X4nMU_pPIsNXDsEM-vP"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This will be returned when load user information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfileResponse"
                }
              }
            }
          },
          "401": {
            "description": "This will be returned when the authorization header is missing or the token is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "message": "JWT token is missing",
                  "code": "401",
                  "name": "Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "This will be returned when no user was found for the email used",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "User not found",
                  "code": "404",
                  "error": "Not Found"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "message": "Internal server error",
                  "code": "500",
                  "name": "Internal Server Error"
                }
              }
            }
          }
        },
        "tags": ["Users"]
      }
    },
    "/beaches": {
      "post": {
        "summary": "Create Beach",
        "description": "Create a new Beach belonging to the authenticated user",
        "operationId": "createBeach",
        "parameters": [
          {
            "name": "x-access-token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1ZTdmZTQ0YzQzYWQwYjAwMThmOGQ5ZmQiLCJuYW1lIjoiV2FsZGVtYXIgTmV0byIsImVtYWlsIjoid2FsZGVtYXJudEBnbWFpbC5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCRsUlZjWkc5d0dIVWJXcHF2TnJNR0F1SnNoWWJTR1RLSElQL3NycDlmTlkzZENFZDBJQjN6TyIsImlhdCI6MTU4NTQ0MDUxNywiZXhwIjoxNTg1NDYwNTE3fQ.JNtzLgCKGTAU9_-QjYUNxtM7X4nMU_pPIsNXDsEM-vP"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Beach"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "This will be returned when the Beach has been created!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BeachCreatedResponse"
                }
              }
            }
          },
          "400": {
            "description": "This will be returned when has invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Error validating beach data",
                  "code": "400",
                  "error": "Bad Request"
                }
              }
            }
          },
          "401": {
            "description": "This will be returned when the authorization header is missing or the token is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "message": "JWT token is missing",
                  "code": "401",
                  "name": "Unauthorized"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "message": "Internal server error",
                  "code": "500",
                  "name": "Internal Server Error"
                }
              }
            }
          }  
        },
        "tags": ["Beaches"]
      }
    },
    "/forecast": {
      "get": {
        "summary": "Get an forecast",
        "description": "Get the list of forecast ordered by the most ranked",
        "operationId": "getForecast",
        "parameters": [
          {
            "name": "x-access-token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1ZTdmZTQ0YzQzYWQwYjAwMThmOGQ5ZmQiLCJuYW1lIjoiV2FsZGVtYXIgTmV0byIsImVtYWlsIjoid2FsZGVtYXJudEBnbWFpbC5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCRsUlZjWkc5d0dIVWJXcHF2TnJNR0F1SnNoWWJTR1RLSElQL3NycDlmTlkzZENFZDBJQjN6TyIsImlhdCI6MTU4NTQ0MDUxNywiZXhwIjoxNTg1NDYwNTE3fQ.JNtzLgCKGTAU9_-QjYUNxtM7X4nMU_pPIsNXDsEM-vP"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This will be returned when the list of forecast has been returned",
            "content": {
              "application/json": {
                "schema": { 
                  "$ref": "#/components/schemas/TimeForecast"
                }
              }
            }
          },
          "401": {
            "description": "This will be returned when the authorization header is missing or the token is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "message": "JWT token is missing",
                  "code": "401",
                  "name": "Unauthorized"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "message": "Internal server error",
                  "code": "500",
                  "name": "Internal Server Error"
                }
              }
            }
          }
        },
        "tags":["Forecast"]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "apiKey": {
        "type": "apiKey",
        "name": "x-access-token",
        "in": "header"
      }
    },
    "schemas": {
      "name": {
        "type": "string",
        "example": "John Doe"
      },
      "email": {
        "type": "string",
        "example": "john@mail.com"
      },
      "password": {
        "type": "string",
        "example": "12345#@$$%"
      },
      "beachName": {
        "type": "string",
        "example": "Copacabana beach"
      },
      "beachLat": {
        "type": "number",
        "example": 10.55
      },
      "beachLng": {
        "type": "number",
        "example": -10.55
      },
      "id": {
        "type": "string",
        "example": "5e8131eba7768d9e4f06c884"
      },
      "beachPosition": {
        "type": "string",
        "enum": [
          "N",
          "S",
          "W",
          "E"
        ],
        "example": "S"
      },
      "forecastPropertyKey": {
        "type": "object",
        "properties": {
          "source": {
            "type": "string",
            "example": "noa"
          },
          "value": {
            "type": "number",
            "example": "10.1"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/name"
          },
          "email": {
            "$ref": "#/components/schemas/email"
          },
          "password": {
            "$ref": "#/components/schemas/password"
          }
        }
      },
      "Beach": {
        "type": "object",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/beachName"
          },
          "lat": {
            "$ref": "#/components/schemas/beachLat"
          },
          "lng": {
            "$ref": "#/components/schemas/beachLng"
          },
          "position": {
            "$ref": "#/components/schemas/beachPosition"
          }
        },
        "required": [
          "name",
          "lat",
          "lng",
          "position"
        ]
      },
      "TimeForecast": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "time": {
              "type": "string",
              "example": "2019-05-31T08:00:00+00:00"
            },
            "forecast": {
              "$ref": "#/components/schemas/BeachForecast"
            }
          }
        }
      },
      "BeachForecast": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "$ref": "#/components/schemas/beachName"
            },
            "lat": {
              "$ref": "#/components/schemas/beachLat"
            },
            "lng": {
              "$ref": "#/components/schemas/beachLng"
            },
            "position": {
              "$ref": "#/components/schemas/beachPosition"
            },
            "rating": {
              "type": "number",
              "example": 3
            },
            "swellDirection": {
              "type": "number",
              "description": "Swell direction in degrees",
              "example": 300
            },
            "swellHeight": {
              "type": "number",
              "description": "Swell height in meters",
              "example": 1
            },
            "swellPeriod": {
              "type": "number",
              "description": "Swell period in seconds",
              "example": 13.67
            },
            "waveDirection": {
              "type": "number",
              "description": "Wave direction in degrees",
              "example": 234
            },
            "waveHeight": {
              "type": "number",
              "description": "Wave height in meters",
              "example": 1.5
            },
            "windDirection": {
              "type": "number",
              "description": "Wind direction in degrees",
              "example": 234
            },
            "windSpeed": {
              "type": "number",
              "description": "Wind speed in meters per second",
              "example": 10
            },
            "time": {
              "type": "string",
              "example": "2019-05-31T08:00:00+00:00"
            }
          }
        }
      },
      "UserAuth": {
        "type": "object",
        "properties": {
          "email": {
            "$ref": "#/components/schemas/email"
          },
          "password": {
            "$ref": "#/components/schemas/password"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "UserCreatedResponse": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "name": {
            "$ref": "#/components/schemas/name"
          },
          "email": {
            "$ref": "#/components/schemas/email"
          }
        }
      },
      "AuthenticatedUserResponse": {
        "type": "object",
        "properties": {
          "user": {
            "type": "object",
            "properties": {
              "id": {
                "$ref": "#/components/schemas/id"
              },
              "name": {
                "$ref": "#/components/schemas/name"
              },
              "email": {
                "$ref": "#/components/schemas/email"
              },
              "token": {
                "$ref": "#/components/schemas/jwtToken"
              }
            }
          }
        }
      },
      "UserProfileResponse": {
        "type": "object",
        "properties": {
          "user": {
            "type": "object",
            "properties": {
              "id": {
                "$ref": "#/components/schemas/id"
              },
              "name": {
                "$ref": "#/components/schemas/name"
              },
              "email": {
                "$ref": "#/components/schemas/email"
              }
            }
          }
        }
      },
      "BeachCreatedResponse": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "name": {
            "$ref": "#/components/schemas/beachName"
          },
          "lat": {
            "$ref": "#/components/schemas/beachLat"
          },
          "lng": {
            "$ref": "#/components/schemas/beachLng"
          },
          "position": {
            "$ref": "#/components/schemas/beachPosition"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "code": {
            "type": "number"
          },
          "error": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "documentation": {
            "type": "string"
          }
        },
        "example": {
          "message": "Invalid parameters",
          "code": "400",
          "error": "Bad Request"
        }
      },
      "AuthenticationError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "code": {
            "type": "number"
          },
          "error": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "documentation": {
            "type": "string"
          }
        },
        "example": {
          "message": "User unauthorized",
          "code": "401",
          "error": "Unauthorized"
        }
      },
      "NotFoundError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "code": {
            "type": "number"
          },
          "error": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "documentation": {
            "type": "string"
          }
        },
        "example": {
          "message": "Not found",
          "code": "404",
          "error": "Not Found"
        }
      },
      "InternalServerError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "code": {
            "type": "number"
          },
          "error": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "documentation": {
            "type": "string"
          }
        },
        "example": {
          "message": "Internal Server Error",
          "code": "500",
          "error": "Internal Server Error"
        }
      },
      "TooManyRequestsError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "code": {
            "type": "number"
          },
          "error": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "documentation": {
            "type": "string"
          }
        },
        "example": {
          "message": "Too Many Requests",
          "code": "429",
          "error": "Too Many Requests"
        }
      }
    }
  }
}